@using SCC.ViewModels;
@using SCC.Controllers;
@using SCC_BL;

@model UserRoleAndPermissionManagementViewModel

@{
    User actualUser = (User)Session[SCC_BL.Settings.AppValues.Session.GLOBAL_ACTUAL_USER];

    int mainCategoryID = (int)SCC_BL.DBValues.Catalog.ELEMENT.ELEMENT_USER;

    string mainControllerName = OverallController.GetControllerName(typeof(UserController));

    string logsControllerName = OverallController.GetControllerName(typeof(LogController));
    string logsActionName = nameof(LogController.Index);

    List<Permission> allPermissionList = (List<Permission>)ViewData[SCC_BL.Settings.AppValues.ViewData.User.AsignRolesAndPermissions.AllPermissionList.NAME];
    List<Role> allRoleList = (List<Role>)ViewData[SCC_BL.Settings.AppValues.ViewData.User.AsignRolesAndPermissions.AllRoleList.NAME];

    ViewBag.Title = "Asignación de roles y permisos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Styles.Render("~/Content/panel")
@Styles.Render("~/Content/radio")

@*@Styles.Render("~/Content/datatables")
    @Scripts.Render("~/bundles/datatables")*@

<link href="~/Content/DataTables/datatables.min.css" rel="stylesheet" />
<script src="~/Content/DataTables/datatables.min.js"></script>

<link href="~/Content/Custom/Chosen/chosen.min.css" rel="stylesheet" />
<script src="~/Content/Custom/Chosen/chosen.jquery.min.js"></script>

<link href="~/Content/Custom/Datatables/custom-datatables.css" rel="stylesheet" />

<div class="panel">
    <div class="accordion accordion-flush" id="accordionExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse"
                        data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    <strong> Asignar roles y permisos</strong>
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne"
                 data-bs-parent="#accordionExample">
                <form id="frmManage" action="@Url.Action(nameof(UserController.AsignRolesAndPermissions), mainControllerName)" method="post">
                    <div class="accordion-body">
                        <div class="row d-block text-center text-danger required-advise d-none m-5">
                            Por favor, ingrese todos los datos requeridos
                        </div>
                        <div class="row property-field">
                            <div class="col-5 property-field-label">
                                Usuarios disponibles <span class="required">*</span>
                            </div>
                            <div class="col-7">
                                @Html.DropDownList(
                                    "userArray",
                                    (ViewData[SCC_BL.Settings.AppValues.ViewData.User.AsignRolesAndPermissions.UserList.NAME] as MultiSelectList),
                                    new
                                    {
                                        @class = "property-field-control",
                                        placeholder = "Usuarios disponibles",
                                        title = "Usuarios disponibles",
                                        multiple = ""
                                    }
                                )
                            </div>
                        </div>
                        <div class="row property-field">
                            <div class="col-5 property-field-label">
                                Roles disponibles <span class="required">*</span>
                            </div>
                            <div class="col-7">
                                @Html.DropDownList(
                                    "roleArray",
                                    (ViewData[SCC_BL.Settings.AppValues.ViewData.User.AsignRolesAndPermissions.RoleList.NAME] as MultiSelectList),
                                    new
                                    {
                                        @class = "property-field-control",
                                        placeholder = "Roles disponibles",
                                        title = "Roles disponibles",
                                        multiple = ""
                                    }
                                )
                            </div>
                        </div>
                        <div class="row property-field @(actualUser.HasPermission(SCC_BL.DBValues.Catalog.Permission.CAN_ASIGN_PERMISSIONS_TO_USERS) ? string.Empty : "d-none")">
                            <div class="col-5 property-field-label">
                                Permisos disponibles
                            </div>
                            <div class="col-7">
                                @Html.DropDownList(
                                    "permissionArray",
                                    (ViewData[SCC_BL.Settings.AppValues.ViewData.User.AsignRolesAndPermissions.PermissionList.NAME] as MultiSelectList),
                                    new
                                    {
                                        @class = "property-field-control",
                                        placeholder = "Permisos disponibles",
                                        title = "Permisos disponibles",
                                        multiple = ""
                                    }
                                )
                            </div>
                        </div>
                    </div>
                    <div class="accordion-footer">
                        <div class="accordion-footer-info">
                            <p>* Campos requeridos</p>
                        </div>
                        <div class="accordion-footer-buttons">
                            <button class="btn-custom-system btn-custom-system-secondary" id="btnCancel" type="button">Cancelar</button>
                            <button id="btnSubmit" class="btn-custom-system btn-custom-system-primary" type="submit">Crear</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="tableContainer">
    <table class="display cell-border" id="tbInfo">
        <thead>
            <tr>
                <th>
                    Usuario
                </th>
                <th>
                    Roles
                </th>
                <th>
                    Permisos
                </th>
                <th>
                    Acciones
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (User user in Model.UserList)
            {
                string tableRowClass = string.Empty;
                if (user.BasicInfo.StatusID == (int)SCC_BL.DBValues.Catalog.STATUS_USER.DELETED)
                {
                    tableRowClass +=
                        string.IsNullOrEmpty(tableRowClass) ?
                            "strikethrough" :
                            " strikethrough";
                }

                <tr class="@tableRowClass">
                    <td>@user.Person.SurName @user.Person.FirstName (@user.Person.Identification)</td>
                    <td>
                        <ol>
                            @foreach (UserRoleCatalog userRoleCatalog in user.RoleList)
                            {
                                <li>
                                    @{
                                        /*Role tempRole = new Role(userRoleCatalog.RoleID);
                                        tempRole.SetDataByID();*/

                                        Role tempRole = allRoleList
                                            .Where(e => e.ID == userRoleCatalog.RoleID)
                                            .FirstOrDefault();
                                    }

                                    @tempRole.Name
                                </li>
                            }
                        </ol>
                    </td>
                    <td>
                        <ol>
                            @foreach (UserPermissionCatalog userPermissionCatalog in user.PermissionList)
                            {
                                <li>
                                    @{
                                        /*Permission tempPermission = new Permission(userPermissionCatalog.PermissionID);
                                        tempPermission.SetDataByID();*/

                                        Permission tempPermission = allPermissionList
                                            .Where(e => e.ID == userPermissionCatalog.PermissionID)
                                            .FirstOrDefault();
                                    }

                                    @tempPermission.Description
                                </li>
                            }
                        </ol>
                    </td>
                    <td>
                        <button data-elementid="@user.ID" class="btn-element-action btn-element-action-primary btn-edit" title="Editar">
                            <i class='bx bxs-pencil'></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<script>
    $(document).ready(function () {
        fetchDatatableBasicData().then(response => {
            const dateNow = new Date();
            let fileName = 'Listado de asignaciones de roles y permisos' + '_' + dateNow.getFullYear() + '_' + (parseInt(dateNow.getMonth()) + 1).toString() + '_' + dateNow.getDate() + '_' + dateNow.getHours() + '_' + dateNow.getMinutes() + '_' + dateNow.getSeconds();

            let data = response;

            let customData;

            /*customData = {
            };
            data.push(customButton);*/

            let excelButton =
            {
                "title": null,
                "filename": fileName,
                "extend": "excel",
                "className": "btn-sm",
                "exportOptions": {
                    "columns": [0, 1, 2],
                    "rows": ":not('.strikethrough')"
                }
            };

            let pdfButton =
            {
                "title": null,
                "filename": fileName,
                "extend": "pdfHtml5",
                "className": "btn-sm",
                "orientation": "landscape",
                "pageSize": "LEGAL",
                "exportOptions": {
                    "columns": [0, 1, 2],
                    "rows": ":not('.strikethrough')"
                }
            };

            let copyButton =
            {
                "title": null,
                "filename": fileName,
                "extend": 'copy',
                "text": 'Copiar',
                "exportOptions":
                {
                    "modifier": {
                        page: 'current'
                    },
                    "columns": [0, 1, 2],
                    "rows": ":not('.strikethrough')"
                }
            };

            data["buttons"].push(excelButton);
            data["buttons"].push(pdfButton);
            data["buttons"].push(copyButton);

            startDataTable('#tbInfo', data);
        });

        fetchMultiSelectBasicData().then(response => {
            let data = response;

            startMultiSelect('#userArray', data);
            startMultiSelect('#roleArray', data);
            startMultiSelect('#permissionArray', data);
        });
    });

    $('#btnCancel').click(() => {
        window.open('@Url.Action(nameof(UserController.AsignRolesAndPermissions), mainControllerName)', '_self');
    });

    $('#btnSubmit').click(() => {
        const requiredAdviseElement = $('.required-advise');

        if (
            ($('#userArray').val() == '' || $('#userArray').val() == null) ||
            ($('#roleArray').val() == '' || $('#roleArray').val() == null)/* ||
            ($('#permissionArray').val() == '' || $('#permissionArray').val() == null)*/
        ) {
            $(requiredAdviseElement).removeClass('d-none');
            return false;
        }

        const message = '¿Quiere guardar los cambios?';

        if (confirm(message) != true) {
            return false;
        }
    });

    $('.btn-edit').click((e) => {
        let message = '¿Quieres salir de esta pantalla para editar el elemento?';

        const element = e.currentTarget;
        const elementID = element.dataset.elementid;

        if (confirm(message) == true) {
            window.open('@Url.Action(nameof(UserController.AsignRolesAndPermissions), mainControllerName)?userID=' + elementID, '_self');
        }
    });
</script>