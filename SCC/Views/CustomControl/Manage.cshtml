@using SCC.Controllers;
@using SCC_BL;

@model List<CustomControl>

@{
    User actualUser = (User)Session[SCC_BL.Settings.AppValues.Session.GLOBAL_ACTUAL_USER];

    int mainCategoryID = (int)SCC_BL.DBValues.Catalog.ELEMENT.ELEMENT_CUSTOMCONTROL;

    string mainControllerName = OverallController.GetControllerName(typeof(CustomControlController));

    string logsControllerName = OverallController.GetControllerName(typeof(LogController));
    string logsActionName = nameof(LogController.Index);

    bool hasModel = ViewData[SCC_BL.Settings.AppValues.ViewData.CustomControl.Manage.MODEL_ID] != null;

    int actualCustomControlID = hasModel ? (int)ViewData[SCC_BL.Settings.AppValues.ViewData.CustomControl.Manage.MODEL_ID] : 0;

    List<Catalog> allModuleList = (List<Catalog>)ViewData[SCC_BL.Settings.AppValues.ViewData.CustomControl.Manage.MODULE_LIST];

    ViewBag.Title = "Administración de campos personalizados";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Styles.Render("~/Content/panel")
@Styles.Render("~/Content/radio")

@*@Styles.Render("~/Content/datatables")
    @Scripts.Render("~/bundles/datatables")*@

<link href="~/Content/DataTables/datatables.min.css" rel="stylesheet" />
<script src="~/Content/DataTables/datatables.min.js"></script>

<link href="~/Content/Custom/Chosen/chosen.min.css" rel="stylesheet" />
<script src="~/Content/Custom/Chosen/chosen.jquery.min.js"></script>

<link href="~/Content/Custom/Datatables/custom-datatables.css" rel="stylesheet" />

<div class="panel">
    <div class="accordion accordion-flush border-top-thick" id="accordionExample">
        <div class="accordion-item">
            <div class="show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <div class="row text-center title">
                        <h6>Seleccione un tipo de control</h6>
                    </div>
                    <div class="control-type-container">
                        <button class="btn-element-action btn-element-action-primary-light btn-control-type-selector" data-controltypeid="@((int)SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE.TEXT_BOX)" title="Campo de texto">
                            <i class='bx bx-move-horizontal'></i>
                        </button>
                        <button class="btn-element-action btn-element-action-primary-light btn-control-type-selector" data-controltypeid="@((int)SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE.TEXT_AREA)" title="Área de texto">
                            <i class='bx bx-paragraph'></i>
                        </button>
                        <button class="btn-element-action btn-element-action-primary-light btn-control-type-selector" data-controltypeid="@((int)SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE.CHECKBOX)" title="Checkbox">
                            <i class='bx bx-check-square'></i>
                        </button>
                        <button class="btn-element-action btn-element-action-primary-light btn-control-type-selector" data-controltypeid="@((int)SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE.RADIO_BUTTON)" title="Radio button">
                            <i class='bx bx-radio-circle-marked'></i>
                        </button>
                        <button class="btn-element-action btn-element-action-primary-light btn-control-type-selector" data-controltypeid="@((int)SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE.SELECT_LIST)" title="Lista desplegable">
                            <i class='bx bx-list-ul'></i>
                        </button>
                    </div>
                    <div id="controlConfigurationContainer" class="panel d-none">
                        <div class="accordion accordion-flush" id="accordionExample">
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="headingOne">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse"
                                            data-bs-target="#collapseOne" aria-expanded="true"
                                            aria-controls="collapseOne">
                                        <strong> Configurar control personalizado</strong>
                                    </button>
                                </h2>
                                <div id="collapseOne" class="accordion-collapse collapse show"
                                     aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                                    <div id="customControlContainer" class="accordion-body"></div>
                                    <div class="accordion-footer">
                                        <div class="accordion-footer-buttons">
                                            @if (actualUser.HasPermission(SCC_BL.DBValues.Catalog.Permission.CAN_CREATE_CUSTOM_FIELDS))
                                            {
                                                <button class="btn-custom-system btn-custom-system-secondary" id="btnCancel" type="button">Cancelar</button>

                                                if (hasModel)
                                                {
                                                    <button id="btnSubmit" class="btn-custom-system btn-custom-system-primary" type="submit">Actualizar</button>
                                                }
                                                else
                                                {
                                                    <button id="btnSubmit" class="btn-custom-system btn-custom-system-primary" type="submit">Crear</button>
                                                }
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="tableContainer">
    <table class="display cell-border" id="tbInfo">
        <thead>
            <tr>
                <th>
                    ID del sistema
                </th>
                <th>
                    Nombre
                </th>
                <th>
                    Tipo
                </th>
                <th>
                    Máscara
                </th>
                <th>
                    Detalles
                </th>
                @*<th>
                        Detalles (hidden)
                    </th>*@
                <th>
                    Módulo al que aplica
                </th>
                <th>
                    Obligatorio
                </th>
                <th>
                    Acciones
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (CustomControl customControl in Model)
            {
                string tableRowClass = string.Empty;
                if (customControl.BasicInfo.StatusID == (int)SCC_BL.DBValues.Catalog.STATUS_CUSTOM_CONTROL.DELETED)
                {
                    tableRowClass +=
                        string.IsNullOrEmpty(tableRowClass) ?
                            "strikethrough" :
                            " strikethrough";
                }

                <tr class="@tableRowClass">
                    <td>@customControl.ID</td>
                    <td>@customControl.Label</td>
                    <td>
                        @switch (customControl.ControlTypeID)
                        {
                            case (int)SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE.TEXT_BOX:
                                @:Campo de texto
                                break;
                            case (int)SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE.TEXT_AREA:
                                @:Área de texto
                                break;
                            case (int)SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE.CHECKBOX:
                                @:Checkbox
                                break;
                            case (int)SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE.RADIO_BUTTON:
                                @:Radio button
                                break;
                            case (int)SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE.SELECT_LIST:
                                @:Lista desplegable
                                break;
                            default:
                                break;
                        }
                    </td>
                    <td>@customControl.Mask</td>
                    @*<td>
                            <ol>
                                @foreach (CustomControlValueCatalog value in customControl.ValueList.OrderBy(e => e.Order))
                                {
                                    <li>
                                        @value.Name
                                    </li>
                                }
                            </ol>
                        </td>*@
                    <td>
                        @String.Join(", ", customControl.ValueList.OrderBy(e => e.Order).Select(e => e.Name))
                    </td>
                    <td>
                        @{
                            Catalog tempCatalog = allModuleList.Where(e => e.ID == customControl.ModuleID).FirstOrDefault();
                        }

                        @tempCatalog.Description
                    </td>
                    <td>
                        @if (customControl.IsRequired)
                        {
                            @:SI
                        }
                        else
                        {
                            @:NO
                        }
                    </td>
                    <td>
                        @if (customControl.BasicInfo.StatusID != (int)SCC_BL.DBValues.Catalog.STATUS_CUSTOM_CONTROL.DELETED)
                        {
                            <button data-elementid="@customControl.ID" class="btn-element-action btn-element-action-primary btn-customControl-edit" title="Editar">
                                <i class='bx bxs-pencil'></i>
                            </button>
                            <form class="d-inline frm-delete" action="@Url.Action(nameof(CustomControlController.Delete), mainControllerName)" method="post">
                                @Html.Hidden("customControlID", customControl.ID)
                                <button class="btn-element-action btn-element-action-danger btn-customControl-delete" type="submit" title="Eliminar">
                                    <i class='bx bxs-trash'></i>
                                </button>
                            </form>
                            <button data-elementid="@customControl.ID" class="btn-element-action btn-element-action-warning btn-customControl-logs" title="Ver logs">
                                <i class='bx bx-book-reader'></i>
                            </button>
                        }
                        else
                        {
                            <button data-elementid="@customControl.ID" class="btn-element-action btn-element-action-warning btn-customControl-logs" title="Ver logs">
                                <i class='bx bx-book-reader'></i>
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<script>
    $(document).ready(function () {
        fetchDatatableBasicData().then(response => {
            const dateNow = new Date();
            let fileName = 'Listado de campos personalizados' + '_' + dateNow.getFullYear() + '_' + (parseInt(dateNow.getMonth()) + 1).toString() + '_' + dateNow.getDate() + '_' + dateNow.getHours() + '_' + dateNow.getMinutes() + '_' + dateNow.getSeconds();

            let data = response;

            let customData;

            /*customData = {
            };
            data.push(customButton);*/

            let excelButton =
            {
                "title": null,
                "filename": fileName,
                "extend": "excel",
                "className": "btn-sm",
                "exportOptions": {
                    "columns": [1, 2, 3, 4, 5, 6],
                    "rows": ":not('.strikethrough')"
                }
            };

            let pdfButton =
            {
                "title": null,
                "filename": fileName,
                "extend": "pdfHtml5",
                "className": "btn-sm",
                "orientation": "landscape",
                "pageSize": "LEGAL",
                "exportOptions": {
                    "columns": [1, 2, 3, 4, 5, 6],
                    "rows": ":not('.strikethrough')"
                }
            };

            let copyButton =
            {
                "title": null,
                "filename": fileName,
                "extend": 'copy',
                "text": 'Copiar',
                "exportOptions":
                {
                    "modifier": {
                        page: 'current'
                    },
                    "columns": [1, 2, 3, 4, 5, 6],
                    "rows": ":not('.strikethrough')"
                }
            };

            /*data["columnDefs"] = [
                {
                    "target": 5,
                    "visible": false,
                    "searchable": false
                }
            ];*/

            data["buttons"].push(excelButton);
            data["buttons"].push(pdfButton);
            data["buttons"].push(copyButton);

            startDataTable('#tbInfo', data);
        });

        if (@(actualCustomControlID != null ? actualCustomControlID : 0) > 0)
        {
            let actualCustomControlID = @(actualCustomControlID != null ? actualCustomControlID : 0);
            loadControlConfiguration(0, actualCustomControlID);
        }

        if (sessionStorage.getItem('CURRENT_CONTROL_TYPE_ID') != null) {
            loadControlConfiguration(sessionStorage.getItem('CURRENT_CONTROL_TYPE_ID'));
            sessionStorage.removeItem('CURRENT_CONTROL_TYPE_ID');
        }
    });

    $('.btn-customControl-edit').click((e) => {
        let message = '¿Quieres salir de esta pantalla para editar el elemento?';

        const element = e.currentTarget;
        const elementID = element.dataset.elementid;

        if (confirm(message) == true) {
            window.open('@Url.Action(nameof(CustomControlController.Manage), mainControllerName)?customControlID=' + elementID, '_self');
        }
    });

    $('.btn-customControl-logs').click((e) => {
        const element = e.currentTarget;
        const elementID = element.dataset.elementid;

        window.open('@Url.Action(logsActionName, logsControllerName)?categoryID=' + @mainCategoryID + '&itemID=' + elementID, '_blank');
    });

    $('#btnCancel').click(() => {
        window.open('@Url.Action(nameof(CustomControlController.Manage), mainControllerName)', '_self');
    });

    $('.frm-delete').submit((e) => {
        let message = '¿Quieres eliminar este elemento del sistema?';

        if (confirm(message) != true) {
            return false;
        }
    });

    $('#btnSubmit').click(() => {
        $('.custom-control-form').submit();

        /*const message = '¿Quiere guardar los cambios?';

        if (confirm(message) != true) {
            return false;
        }

        const requiredAdviseElement = $('.required-advise');

        if (
            ($('#permissionList').val() == '' || $('#permissionList').val() == null)
        ) {
            $(requiredAdviseElement).removeClass('d-none');
            return false;
        }*/
    });

    $('.btn-control-type-selector').click((e) => {
        const containerID = 'customControlContainer';

        if ($('#' + containerID).html() != '') {
            if (confirm('¿Quiere cargar una nueva ventana de creación?') != true) {
                return;
            }
        }

        const element = e.currentTarget;
        const controlTypeID = element.dataset.controltypeid;

        @if (hasModel)
        {
            @:sessionStorage.setItem('CURRENT_CONTROL_TYPE_ID', controlTypeID);
            @:window.open('@Url.Action(nameof(CustomControlController.Manage), mainControllerName)', '_self');
        }
        else
        {
            @:loadControlConfiguration(controlTypeID);
        }
    });

    function loadControlConfiguration(controlTypeID, actualCustomControlID = 0) {
        const containerID = 'customControlContainer';

        $('#' + containerID).html('');

        let url = '@Url.Action(nameof(CustomControlController.CustomControlTypeView), mainControllerName)?customControlTypeID=' + controlTypeID;

        if (actualCustomControlID > 0) {
            url += '&customControlID=' + actualCustomControlID;
        }

        loadHtmlToControl(url, containerID);

        $('#controlConfigurationContainer').removeClass('d-none');
    }
</script>