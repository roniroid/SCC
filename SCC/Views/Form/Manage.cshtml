@using SCC.Controllers;
@using SCC_BL;

@model List<Form>

@{
    User actualUser = (User)Session[SCC_BL.Settings.AppValues.Session.GLOBAL_ACTUAL_USER];

    int mainCategoryID = (int)SCC_BL.DBValues.Catalog.ELEMENT.ELEMENT_FORM;

    string mainControllerName = OverallController.GetControllerName(typeof(FormController));

    string logsControllerName = OverallController.GetControllerName(typeof(LogController));
    string logsActionName = nameof(LogController.Index);

    List<Catalog> allTypeList = (List<Catalog>)ViewData[SCC_BL.Settings.AppValues.ViewData.Form.Manage.AllTypeList.NAME];

    ViewBag.Title = "Administración de grupos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Styles.Render("~/Content/panel")
@Styles.Render("~/Content/radio")

@*@Styles.Render("~/Content/datatables")
    @Scripts.Render("~/bundles/datatables")*@

<link href="~/Content/DataTables/datatables.min.css" rel="stylesheet" />
<script src="~/Content/DataTables/datatables.min.js"></script>

<link href="~/Content/Custom/Chosen/chosen.min.css" rel="stylesheet" />
<script src="~/Content/Custom/Chosen/chosen.jquery.min.js"></script>

<link href="~/Content/Custom/Datatables/custom-datatables.css" rel="stylesheet" />

<div class="tableContainer">
    <table class="display cell-border" id="tbInfo">
        <thead>
            <tr>
                <th>
                    ID del sistema
                </th>
                <th>
                    Nombre
                </th>
                <th>
                    Tipo
                </th>
                <th>
                    Comentarios
                </th>
                <th>
                    Acciones
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (Form form in Model)
            {
                string tableRowClass = string.Empty;
                if (form.BasicInfo.StatusID == (int)SCC_BL.DBValues.Catalog.STATUS_FORM.DELETED)
                {
                    tableRowClass +=
                        string.IsNullOrEmpty(tableRowClass) ?
                            "strikethrough" :
                            " strikethrough";
                }

                <tr class="@tableRowClass">
                    <td>@form.ID</td>
                    <td>@form.Name</td>
                    <td>
                        @{
                            Catalog tempCatalog = allTypeList.Where(e => e.ID == form.TypeID).FirstOrDefault();
                        }

                        @tempCatalog.Description
                    </td>
                    <td>@form.Comment</td>
                    <td>
                        @if (form.BasicInfo.StatusID != (int)SCC_BL.DBValues.Catalog.STATUS_FORM.DELETED)
                        {
                            <button data-elementid="@form.ID" class="btn-element-action btn-element-action-primary btn-form-edit" title="Editar">
                                <i class='bx bxs-pencil'></i>
                            </button>
                            <form class="d-inline frm-delete" action="@Url.Action(nameof(FormController.Delete), mainControllerName)" method="post">
                                @Html.Hidden("formID", form.ID)
                                <button class="btn-element-action btn-element-action-danger btn-form-delete" type="submit" title="Eliminar">
                                    <i class='bx bxs-trash'></i>
                                </button>
                            </form>
                            <button data-elementid="@form.ID" class="btn-element-action btn-element-action-warning btn-form-logs" title="Ver logs">
                                <i class='bx bx-book-reader'></i>
                            </button>
                        }
                        else
                        {
                            <button data-elementid="@form.ID" class="btn-element-action btn-element-action-warning btn-form-logs" title="Ver logs">
                                <i class='bx bx-book-reader'></i>
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<script>
    $(document).ready(function () {
        fetchDatatableBasicData().then(response => {
            const dateNow = new Date();
            let fileName = 'Listado de formularios' + '_' + dateNow.getFullYear() + '_' + (parseInt(dateNow.getMonth()) + 1).toString() + '_' + dateNow.getDate() + '_' + dateNow.getHours() + '_' + dateNow.getMinutes() + '_' + dateNow.getSeconds();

            let data = response;

            let customData;

            /*customData = {
            };
            data.push(customButton);*/

            let excelButton =
            {
                "title": null,
                "filename": fileName,
                "extend": "excel",
                "className": "btn-sm",
                "exportOptions": {
                    "columns": [0, 1, 2, 3],
                    "rows": ":not('.strikethrough')"
                }
            };

            let pdfButton =
            {
                "title": null,
                "filename": fileName,
                "extend": "pdfHtml5",
                "className": "btn-sm",
                "orientation": "landscape",
                "pageSize": "LEGAL",
                "exportOptions": {
                    "columns": [0, 1, 2, 3],
                    "rows": ":not('.strikethrough')"
                }
            };

            let copyButton =
            {
                "title": null,
                "filename": fileName,
                "extend": 'copy',
                "text": 'Copiar',
                "exportOptions":
                {
                    "modifier": {
                        page: 'current'
                    },
                    "columns": [0, 1, 2, 3],
                    "rows": ":not('.strikethrough')"
                }
            };

            data["buttons"].push(excelButton);
            data["buttons"].push(pdfButton);
            //data["buttons"].push(copyButton);

            startDataTable('#tbInfo', data);

            let toolbarControls = '';

            toolbarControls +=
                getControlForToolbar(
                    '<div class="radio-control d-inline-block"><input label="NO" name="filterActiveElements" onchange="onChangefilterActiveElementsEvent(this);" type="radio" value="false" @(Request["filterActiveElements"] == null || Request["filterActiveElements"] == "false" ? "checked" : string.Empty ) /><input label="SI" name="filterActiveElements" onchange="onChangefilterActiveElementsEvent(this);" type="radio" value="true" @(Request["filterActiveElements"] == "true" ? "checked" : string.Empty ) /></div>',
                    'Mostrar sólo activos'
                );

            $('div.toolbar').html(toolbarControls);
        });

        /*fetchMultiSelectBasicData().then(response => {
            let data = response;

            startMultiSelect('#[select-id]', data);
        });*/
    });

    function getControlForToolbar(content, label) {
        let result = '';

        const divPropertyField = '<div class="row property-field m-3">%replaceContent%</div>';

        const divPropertyFieldLabel = '<div class="col-5 property-field-label">' + label + '</div>';
        const contentContainer = '<div class="col-7">' + content + '</div>';

        result =
            divPropertyField
                .replace('%replaceContent%', divPropertyFieldLabel + contentContainer);

        return result;
    }

    function onChangefilterActiveElementsEvent(element) {
        let url = '@Url.Action(nameof(ProgramController.Manage), mainControllerName)';

        if (element.value == 'true') {
            url += '?filterActiveElements=' + element.value;
        }

        if ($('#identification').val()) {
            let message = 'Se actualizará todo el contenido de la página, ¿quieres continuar?';

            if (confirm(message) == true) {
                window.open(url, '_self');
            }
        } else {
            window.open(url, '_self');
        }
    }

    $('.btn-form-edit').click((e) => {
        let message = '¿Quieres salir de esta pantalla para editar el elemento?';

        const element = e.currentTarget;
        const elementID = element.dataset.elementid;

        if (confirm(message) == true) {
            window.open('@Url.Action(nameof(FormController.Edit), mainControllerName)?formID=' + elementID, '_self');
        }
    });

    $('.btn-form-logs').click((e) => {
        const element = e.currentTarget;
        const elementID = element.dataset.elementid;

        window.open('@Url.Action(logsActionName, logsControllerName)?categoryID=' + @mainCategoryID + '&itemID=' + elementID, '_blank');
    });

    $('#btnCancel').click(() => {
        window.open('@Url.Action(nameof(FormController.Manage), mainControllerName)', '_self');
    });

    $('.frm-delete').submit((e) => {
        let message = '¿Quieres eliminar este elemento del sistema?';

        if (confirm(message) != true) {
            return false;
        }
    });

    $('#btnSubmit').click(() => {
        /*const requiredAdviseElement = $('.required-advise');

        if (
            ($('#userList').val() == '' || $('#userList').val() == null) ||
            ($('#moduleList').val() == '' || $('#moduleList').val() == null)
        ) {
            $(requiredAdviseElement).removeClass('d-none');
            return false;
        }

        const message = '¿Quiere guardar los cambios?';

        if (confirm(message) != true) {
            return false;
        }*/
    });
</script>