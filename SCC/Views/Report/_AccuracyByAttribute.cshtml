@using SCC.Controllers;
@using SCC_BL;

@model SCC.ViewModels.ReportAccuracyByAttributeViewModel

@{
    User actualUser = (User)Session[SCC_BL.Settings.AppValues.Session.GLOBAL_ACTUAL_USER];

    string mainControllerName = OverallController.GetControllerName(typeof(ReportController));

    //bool hasModel = Model.ReportResultsAccuracyByAttributeViewModel != null;
    bool hasModel = false;

    string reportTitle = "Reporte de precisión por atributo";

    ViewBag.Title = reportTitle;
}

@Styles.Render("~/Content/panel")
@Styles.Render("~/Content/radio")

<link href="~/Content/Custom/Chosen/chosen.min.css" rel="stylesheet" />
<script src="~/Content/Custom/Chosen/chosen.jquery.min.js"></script>

<div class="panel">
    <div class="accordion accordion-flush" id="accordionExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    <strong> @reportTitle</strong>
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse @(!hasModel ? "show" : string.Empty)" aria-labelledby="headingOne"
                 data-bs-parent="#accordionExample">
                <form id="frmSubmit" action="@Url.Action(nameof(ReportController.AccuracyByAttribute), mainControllerName)" method="post" target="_blank">
                    @Html.HiddenFor(modelItem => Model.AttributeIDArray)
                    @Html.HiddenFor(modelItem => Model.TransactionCustomFieldCatalog)

                    <div class="accordion-body">
                        <div class="row d-block text-center text-danger required-advise d-none m-5">
                            Por favor, ingrese todos los datos requeridos
                        </div>
                        <div class="row property-field">
                            <div class="col-5 property-field-label">
                                Fecha de inicio de la transacción
                            </div>
                            <div class="col-7">
                                @Html.TextBoxFor(modelitem =>
                                    Model.TransactionStartDate,
                                    null,
                                    new
                                    {
                                        @class = "property-field-control",
                                        placeholder = "Fecha de inicio de la transacción",
                                        autocomplete = "off",
                                        type = "date",
                                            @Value =
                                                Model.TransactionStartDate != null
                                                    ? (((DateTime)Model.TransactionStartDate).Year > 2000
                                                        ? ((DateTime)Model.TransactionStartDate).ToString("yyyy-MM-dd")
                                                        : /*DateTime.Now.AddMonths(-4).ToString("yyyy-MM-dd")*/ string.Empty)
                                                    : /*DateTime.Now.AddMonths(-4).ToString("yyyy-MM-dd")*/ string.Empty
                                    })
                            </div>
                        </div>
                        <div class="row property-field">
                            <div class="col-5 property-field-label">
                                Fecha de finalización de la transacción
                            </div>
                            <div class="col-7">
                                @Html.TextBoxFor(modelitem =>
                                    Model.TransactionEndDate,
                                    null,
                                    new
                                    {
                                        @class = "property-field-control",
                                        placeholder = "Fecha de finalización de la transacción",
                                        autocomplete = "off",
                                        type = "date",
                                            @Value =
                                                Model.TransactionEndDate != null
                                                    ? (((DateTime)Model.TransactionEndDate).Year > 2000
                                                        ? ((DateTime)Model.TransactionEndDate).ToString("yyyy-MM-dd")
                                                        : /*DateTime.Now.ToString("yyyy-MM-dd")*/ string.Empty)
                                                    : /*DateTime.Now.ToString("yyyy-MM-dd")*/ string.Empty
                                    })
                            </div>
                        </div>
                        <div class="row property-field">
                            <div class="col-5 property-field-label">
                                Fecha de inicio de la evaluación
                            </div>
                            <div class="col-7">
                                @Html.TextBoxFor(modelitem =>
                                    Model.EvaluationStartDate,
                                    null,
                                    new
                                    {
                                        @class = "property-field-control",
                                        placeholder = "Fecha de inicio de la evaluación",
                                        autocomplete = "off",
                                        type = "date",
                                            @Value =
                                                Model.EvaluationStartDate != null
                                                    ? (((DateTime)Model.EvaluationStartDate).Year > 2000
                                                        ? ((DateTime)Model.EvaluationStartDate).ToString("yyyy-MM-dd")
                                                        : /*DateTime.Now.ToString("yyyy-MM-dd")*/ string.Empty)
                                                    : /*DateTime.Now.AddMonths(-4).ToString("yyyy-MM-dd")*/ string.Empty
                                    })
                            </div>
                        </div>
                        <div class="row property-field">
                            <div class="col-5 property-field-label">
                                Fecha de finalización de la evaluación
                            </div>
                            <div class="col-7">
                                @Html.TextBoxFor(modelitem =>
                                    Model.EvaluationEndDate,
                                    null,
                                    new
                                    {
                                        @class = "property-field-control",
                                        placeholder = "Fecha de finalización de la evaluación",
                                        autocomplete = "off",
                                        type = "date",
                                            @Value =
                                                Model.EvaluationEndDate != null
                                                    ? (((DateTime)Model.EvaluationEndDate).Year > 2000
                                                        ? ((DateTime)Model.EvaluationEndDate).ToString("yyyy-MM-dd")
                                                        : /*DateTime.Now.ToString("yyyy-MM-dd")*/ string.Empty)
                                                    : /*DateTime.Now.ToString("yyyy-MM-dd")*/ string.Empty
                                    })
                            </div>
                        </div>
                        <div class="row property-field">
                            <div class="col-5 property-field-label">
                                Programas
                            </div>
                            <div class="col-7">
                                @Html.DropDownListFor(modelitem =>
                                    Model.ProgramIDArray,
                                    (ViewData[SCC_BL.Settings.AppValues.ViewData.Report._AccuracyByAttribute.ProgramList.NAME] as MultiSelectList),
                                    new
                                    {
                                        @class = "property-field-control",
                                        placeholder = "Programas",
                                        title = "Programas",
                                        multiple = ""
                                    }
                                )
                            </div>
                        </div>
                        <div class="row property-field">
                            <div class="col-5 property-field-label">
                                Usuarios
                            </div>
                            <div class="col-7">
                                @Html.DropDownListFor(modelitem =>
                                    Model.UserIDArray,
                                    (ViewData[SCC_BL.Settings.AppValues.ViewData.Report._AccuracyByAttribute.UserList.NAME] as MultiSelectList),
                                    new
                                    {
                                        @class = "property-field-control",
                                        placeholder = "Usuarios",
                                        title = "Usuarios",
                                        multiple = ""
                                    }
                                )
                            </div>
                        </div>
                        <div class="row property-field">
                            <div class="col-5 property-field-label">
                                Supervisores
                            </div>
                            <div class="col-7">
                                @Html.DropDownListFor(modelitem =>
                                    Model.SupervisorUserIDArray,
                                    (ViewData[SCC_BL.Settings.AppValues.ViewData.Report._AccuracyByAttribute.SupervisorList.NAME] as MultiSelectList),
                                    new
                                    {
                                        @class = "property-field-control",
                                        placeholder = "Supervisores",
                                        title = "Supervisores",
                                        multiple = ""
                                    }
                                )
                            </div>
                        </div>
                        <div class="row property-field">
                            <div class="col-5 property-field-label">
                                Evaluadores
                            </div>
                            <div class="col-7">
                                @Html.DropDownListFor(modelitem =>
                                    Model.EvaluatorUserIDArray,
                                    (ViewData[SCC_BL.Settings.AppValues.ViewData.Report._AccuracyByAttribute.EvaluatorList.NAME] as MultiSelectList),
                                    new
                                    {
                                        @class = "property-field-control",
                                        placeholder = "Evaluadores",
                                        title = "Evaluadores",
                                        multiple = ""
                                    }
                                )
                            </div>
                        </div>
                        <div class="row property-field">
                            <div class="col-5 property-field-label">
                                Tipos de error
                            </div>
                            <div class="col-7">
                                @Html.DropDownListFor(modelitem =>
                                    Model.ErrorTypeIDArray,
                                    (ViewData[SCC_BL.Settings.AppValues.ViewData.Report._AccuracyByAttribute.ErrorTypeList.NAME] as MultiSelectList),
                                    new
                                    {
                                        @class = "property-field-control",
                                        placeholder = "Tipos de error",
                                        title = "Tipos de error",
                                        multiple = ""
                                    }
                                )
                            </div>
                        </div>
                        <div class="row property-field">
                            <div class="col-5 property-field-label">
                                Atributos <span class="required">*</span>
                            </div>
                            <div class="col-7">
                                @Html.DropDownList(
                                    "selectAttributeList",
                                    (ViewData[SCC_BL.Settings.AppValues.ViewData.Report._AccuracyByAttribute.AttributeList.NAME] as MultiSelectList),
                                    new
                                    {
                                        @class = "property-field-control",
                                        placeholder = "Atributos",
                                        title = "Atributos",
                                        multiple = ""
                                    }
                                )
                            </div>
                        </div>
                        <div class="row property-field">
                            <div class="col-5 property-field-label">
                                Restricción
                            </div>
                            <div class="col-7">
                                <div class="radio-control d-inline-block">
                                    @Html.RadioButtonFor(model =>
                                        Model.AttributeControllable,
                                        true,
                                        new
                                        {
                                            label = "Controlable",
                                            @class = "report-constraint"
                                        }
                                    )
                                    @Html.RadioButtonFor(model =>
                                        Model.AttributeControllable,
                                        false,
                                        new
                                        {
                                            label = "Controlable",
                                            @class = "report-constraint d-none"
                                        }
                                    )
                                    @Html.RadioButtonFor(model =>
                                        Model.AttributeKnown,
                                        true,
                                        new
                                        {
                                            label = "Conocido",
                                            @class = "report-constraint d-none"
                                        }
                                    )
                                    @Html.RadioButtonFor(model =>
                                        Model.AttributeKnown,
                                        false,
                                        new
                                        {
                                            label = "Conocido",
                                            @class = "report-constraint d-none"
                                        }
                                    )
                                    @Html.RadioButtonFor(model =>
                                        Model.AttributeNoConstraint,
                                        true,
                                        new
                                        {
                                            @class = "report-no-constraint",
                                            label = "Ninguno",
                                            @checked = ""
                                        }
                                    )
                                    @Html.RadioButtonFor(model =>
                                        Model.AttributeNoConstraint,
                                        false,
                                        new
                                        {
                                            @class = "report-no-constraint report-no-constraint-no d-none",
                                            label = "Ninguno"
                                        }
                                    )
                                </div>
                            </div>
                        </div>
                        <div class="panel">
                            <div class="accordion accordion-flush w-100" id="customControlPanel">
                                <div class="accordion-item">
                                    <h2 class="accordion-header" id="headingOne">
                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                                data-bs-target="#customControlPanelCollapse" aria-expanded="true" aria-controls="customControlPanelCollapse">
                                            <strong> Campos personalizados</strong>
                                        </button>
                                    </h2>
                                    <div id="customControlPanelCollapse" class="accordion-collapse collapse" aria-labelledby="headingOne"
                                         data-bs-parent="#customControlPanel">
                                        @foreach (CustomControl customControl in Model.CustomControlList)
                                        {
                                            Dictionary<string, object> htmlAttributes = new Dictionary<string, object>();
                                            htmlAttributes.Add("autocomplete", "off");

                                            if (!string.IsNullOrEmpty(customControl.Mask))
                                            {
                                                switch (customControl.Mask)
                                                {
                                                    case SCC_BL.Settings.AppValues.Masks.Date1.MASK:
                                                        htmlAttributes.Add("pattern", SCC_BL.Settings.AppValues.Masks.Date1.PATTERN);
                                                        htmlAttributes.Add("type", "date");
                                                        break;
                                                    case SCC_BL.Settings.AppValues.Masks.Time1.MASK:
                                                        htmlAttributes.Add("pattern", SCC_BL.Settings.AppValues.Masks.Time1.PATTERN);
                                                        htmlAttributes.Add("type", "time");
                                                        break;
                                                    case SCC_BL.Settings.AppValues.Masks.PhoneNumber1.MASK:
                                                        htmlAttributes.Add("pattern", SCC_BL.Settings.AppValues.Masks.PhoneNumber1.PATTERN);
                                                        htmlAttributes.Add("type", "text");
                                                        break;
                                                    case SCC_BL.Settings.AppValues.Masks.PhoneNumber2.MASK:
                                                        htmlAttributes.Add("pattern", SCC_BL.Settings.AppValues.Masks.PhoneNumber2.PATTERN);
                                                        htmlAttributes.Add("type", "text");
                                                        break;
                                                    case SCC_BL.Settings.AppValues.Masks.Alphanumeric1.MASK:
                                                        htmlAttributes.Add("pattern", SCC_BL.Settings.AppValues.Masks.Alphanumeric1.PATTERN);
                                                        htmlAttributes.Add("type", "text");
                                                        break;
                                                    case SCC_BL.Settings.AppValues.Masks.Name1.MASK:
                                                        htmlAttributes.Add("pattern", SCC_BL.Settings.AppValues.Masks.Name1.PATTERN);
                                                        htmlAttributes.Add("type", "text");
                                                        break;
                                                    case SCC_BL.Settings.AppValues.Masks.SurName1.MASK:
                                                        htmlAttributes.Add("pattern", SCC_BL.Settings.AppValues.Masks.SurName1.PATTERN);
                                                        htmlAttributes.Add("type", "text");
                                                        break;
                                                    case SCC_BL.Settings.AppValues.Masks.Email1.MASK:
                                                        htmlAttributes.Add("pattern", SCC_BL.Settings.AppValues.Masks.Email1.PATTERN);
                                                        htmlAttributes.Add("type", "text");
                                                        break;
                                                    default:
                                                        break;
                                                }
                                            }

                                            string currentControlClass = "property-field-control custom-control-value " + customControl.CssClass;

                                            htmlAttributes.Add("placeholder", customControl.Label);
                                            htmlAttributes.Add("title", customControl.Description);
                                            htmlAttributes.Add("class", currentControlClass);

                                            <div class="row property-field custom-control-field" data-customfieldid="@customControl.ID" data-customcontrolid="@customControl.ID">
                                                <div class="col-5 property-field-label">
                                                    @customControl.Label
                                                </div>
                                                <div class="col-7 value-container">
                                                    @switch ((SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE)customControl.ControlTypeID)
                                                    {
                                                        case SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE.TEXT_BOX:
                                                            htmlAttributes["class"] = htmlAttributes["class"].ToString() + " custom-control-value-text";

                                                            @Html.TextBox(
                                                                "customControl_" + customControl.ID,
                                                                null,
                                                                htmlAttributes);
                                                            break;
                                                        case SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE.TEXT_AREA:
                                                            htmlAttributes["class"] = htmlAttributes["class"].ToString() + " custom-control-value-text";

                                                            htmlAttributes.Add(
                                                                "rows",
                                                                customControl.NumberOfRows.ToString());

                                                            htmlAttributes.Add(
                                                                "cols",
                                                                customControl.NumberOfColumns.ToString());

                                                            @Html.TextArea(
                                                                "customControl_" + customControl.ID,
                                                                null,
                                                                htmlAttributes);
                                                            break;
                                                        case SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE.CHECKBOX:
                                                            htmlAttributes["class"] = htmlAttributes["class"].ToString() + " custom-control-value-checkbox";

                                                            htmlAttributes["class"] = htmlAttributes["class"].ToString().Replace("property-field-control", "");

                                                            <div class="radio-control- d-inline-block">
                                                                @foreach (CustomControlValueCatalog customControlValueCatalog in customControl.ValueList)
                                                                {
                                                                    htmlAttributes.Remove("label");
                                                                    htmlAttributes.Add("label", customControlValueCatalog.Name);

                                                                    <input id="customControl_@customControl.ID" class="@htmlAttributes["class"]" label="@customControlValueCatalog.Name" name="customControl_@customControl.ID" type="checkbox" value="@customControlValueCatalog.ID" />
                                                                }
                                                            </div>
                                                            break;
                                                        case SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE.RADIO_BUTTON:
                                                            htmlAttributes["class"] = htmlAttributes["class"].ToString() + " custom-control-value-radio";

                                                            htmlAttributes["class"] = htmlAttributes["class"].ToString().Replace("property-field-control", "");

                                                            <div class="radio-control- d-inline-block">
                                                                @foreach (CustomControlValueCatalog customControlValueCatalog in customControl.ValueList)
                                                                {
                                                                    htmlAttributes.Remove("label");
                                                                    htmlAttributes.Add("label", customControlValueCatalog.Name);

                                                                    @*@Html.RadioButton(
                                                                        "customControl_" + customControl.ID,
                                                                        customControlValueCatalog.ID,
                                                                        htmlAttributes)*@
                                                                    
                                                                    <div>
                                                                        <input id="customControl_@customControlValueCatalog.ID" class="@htmlAttributes["class"]" label="@customControlValueCatalog.Name" name="customControl_@customControl.ID" type="radio" value="@customControlValueCatalog.ID" />
                                                                        <label for="customControl_@customControlValueCatalog.ID">@customControlValueCatalog.Name</label>
                                                                    </div>
                                                                }
                                                            </div>
                                                            break;
                                                        case SCC_BL.DBValues.Catalog.CUSTOM_CONTROL_TYPE.SELECT_LIST:
                                                            htmlAttributes["class"] = htmlAttributes["class"].ToString() + " custom-control-value-select";

                                                            <select class="custom-control-chosen-select @htmlAttributes["class"]" data-placeholder="@customControl.Label" placeholder="@customControl.Label" title="@customControl.Description" multiple>
                                                                <option value="">Seleccionar</option>
                                                                @{
                                                                    foreach (CustomControlValueCatalog customControlValueCatalog in customControl.ValueList)
                                                                    {
                                                                        <option value="@customControlValueCatalog.ID">
                                                                            @customControlValueCatalog.Name
                                                                        </option>
                                                                    }
                                                                }
                                                            </select>
                                                            break;
                                                        default:
                                                            break;
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="accordion-footer">
                        <div class="accordion-footer-info">
                            <p>* Campos requeridos</p>
                        </div>
                        <div class="accordion-footer-buttons">
                            <button id="btnSubmit" class="btn-custom-system btn-custom-system-primary" type="submit">Enviar</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@*@if (hasModel)
    {
        <div id="resultsContainer">
            @{
                string content = OverallController.Serialize(Model.ReportResultsAccuracyByAttributeViewModel);
            }
            @content
        </div>
    }*@
<script>
    var customControlByProgramList = @Html.Raw(SCC.Controllers.OverallController.Serialize(Model.CustomControlByProgram.CustomControlByProgramList));

    $(document).ready(function () {
        @if (!actualUser.HasPermission(SCC_BL.DBValues.Catalog.Permission.CAN_SEE_REPORTS))
        {
            @:window.open('@Url.Action(nameof(HomeController.Index), OverallController.GetControllerName(typeof(HomeController)))', '_self');
        }

        fetchMultiSelectBasicData('Content/files/multi-select-basic-data.json').then(response => {
            let data = response;

            startMultiSelect('#@nameof(Model.ProgramIDArray)', data);
            startMultiSelect('#@nameof(Model.UserIDArray)', data);
            startMultiSelect('#@nameof(Model.SupervisorUserIDArray)', data);
            startMultiSelect('#@nameof(Model.EvaluatorUserIDArray)', data);
            startMultiSelect('#@nameof(Model.ErrorTypeIDArray)', data);
            @*startMultiSelect('#@nameof(Model.AttributeIDArray)', data);*@
            startMultiSelect('#selectAttributeList', data);

            startMultiSelect('.custom-control-chosen-select', data);
        });

        //updateAttributeList();
    });

    $('#@nameof(Model.ProgramIDArray)').change((e) => {
        let currentControl = e.currentTarget;
        let currentValue = $(currentControl).val();
        updateCustomControlDisplay(currentValue);
    });

    function updateCustomControlDisplay(programIDArray) {
        $('.custom-control-field').removeClass('d-none');
        $('.custom-control-field').addClass('d-none');

        if (programIDArray == null || programIDArray == '') return;

        let customControlsToShow =
            customControlByProgramList.filter(e => programIDArray.includes(e.ProgramID.toString()));

        for (let i = 0; i < customControlsToShow.length; i++) {
            $('.custom-control-field[data-customcontrolid="' + customControlsToShow[i].CustomControlID + '"]').removeClass('d-none');
        }
    }

    var mustLoadAttributes = true;

    $('#@nameof(Model.ProgramIDArray)').change(() => {
        mustLoadAttributes = true;
    });

    $('#@nameof(Model.ErrorTypeIDArray)').change(() => {
        mustLoadAttributes = true;
    })

    @*$('#@nameof(Model.AttributeIDArray)').on('chosen:showing_dropdown', function (event, chosen) {
        if (mustLoadAttributes) {
            updateAttributeList();
        }
    });*@

    $('#selectAttributeList').on('chosen:showing_dropdown', function (event, chosen) {
        if (mustLoadAttributes) {
            updateAttributeList();
        }
    });

    async function updateAttributeList() {
        if (
            ($('#@nameof(Model.ProgramIDArray)').val() == null || $('#@nameof(Model.ProgramIDArray)').val().length == 0) ||
            ($('#@nameof(Model.ErrorTypeIDArray)').val() == null || $('#@nameof(Model.ErrorTypeIDArray)').val().length == 0)) {
            @*$('#@nameof(Model.AttributeIDArray)').html('');
            $('#@nameof(Model.AttributeIDArray)').val('').trigger("chosen:updated");*@
            $('#selectAttributeList').html('');
            $('#selectAttributeList').val('').trigger("chosen:updated");
            //alert('Por favor, seleccione los programas y los tipos de error para obtener los atributos');
            return false;
        }

        //$('#btnSubmit').prop('disabled', false);

        const DATA = {
            'programIDArray': $('#@nameof(Model.ProgramIDArray)').val(),
            'errorTypeIDArray': $('#@nameof(Model.ErrorTypeIDArray)').val()
        };

        //showWaitingModal();

        let response =
            await fetch(
                '@Url.Action(nameof(ReportController.AttributesByProgramAndErrorID), OverallController.GetControllerName(typeof(ReportController)))',
                {
                    method: "POST",
                    body: JSON.stringify(DATA),
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });

        response = await response.json();

        @*$('#@nameof(Model.AttributeIDArray)').html('');*@
        $('#selectAttributeList').html('');

        @*for (let i = 0; i < response.length; i++) {
            $('#@nameof(Model.AttributeIDArray)').append(`<option value="${ response[i].ID }">${ response[i].Name }</option>`);
        }*@

        for (let i = 0; i < response.length; i++) {
            $('#selectAttributeList').append(`<option value="${ response[i].Item1 }">${ response[i].Item2 }</option>`);
        }

        $('#selectAttributeList').val('').trigger("chosen:updated");

        //hideWaitingModal();

        mustLoadAttributes = false;
    }

    $('.report-no-constraint').click(() => {
        $('.report-constraint').prop('checked', false);
    });

    $('.report-constraint').off('change').on('change', function (e) {
        $('.report-constraint').prop('checked', false);
        $('.report-no-constraint').prop('checked', false);

        $('.report-no-constraint-no').prop('checked', true);

        $(e.currentTarget).prop('checked', true);
    });

    $('#frmSubmit').submit((e) => {
        if (
            @*($('#@nameof(Model.AttributeIDArray)').val() == null || $('#@nameof(Model.AttributeIDArray)').val().length == 0)) {*@
            ($('#selectAttributeList').val() == null || $('#selectAttributeList').val().length == 0)) {
            alert('Por favor, seleccione los programas, tipos de error y atributos deseados');
            e.preventDefault();
        }

        @*const requiredAdviseElement = $('.required-advise');

        if (
            ($('#@nameof(Model.ProgramIDArray)').val() == '' || $('#@nameof(Model.ProgramIDArray)').val() == null) ||
            ($('#@nameof(Model.UserIDArray)').val() == '' || $('#@nameof(Model.UserIDArray)').val() == null) ||
            ($('#@nameof(Model.SupervisorUserIDArray)').val() == '' || $('#@nameof(Model.SupervisorUserIDArray)').val() == null) ||
            ($('#@nameof(Model.EvaluationEndDate)').val() == '' || $('#@nameof(Model.EvaluationEndDate)').val() == null) ||
            ($('#@nameof(Model.ErrorTypeIDArray)').val() == '' || $('#@nameof(Model.ErrorTypeIDArray)').val() == null))
        ) {
            $(requiredAdviseElement).removeClass('d-none');
            return false;
        }

        const message = '¿Quiere guardar los cambios?';

        if (confirm(message) != true) {
            return false;
        }*@
    });

    $('#btnSubmit').click(async (e) => {
        let requiredAdviseElement = $('.required-advise');

        if (
            @*($('#AttributeIDArray').val() == '' || $('#AttributeIDArray').val() == null)*@
            ($('#selectAttributeList').val() == '' || $('#selectAttributeList').val() == null)
        ) {
            e.preventDefault();
            alert('Por favor, ingrese todos los datos requeridos');
            $(requiredAdviseElement).removeClass('d-none');
            window.scrollTo(0, 0);
            return false;
        }

        let message = '¿Quiere enviar los datos ingresados?';

        if (confirm(message) != true) {
            e.preventDefault();
            return false;
        }

        let finalAttributeList = [];
        let auxAttributeList = $('#selectAttributeList').val();

        for (var i = 0; i < auxAttributeList.length; i++) {
            auxAttributeList[i].split(',').map(e => finalAttributeList.push(parseInt(e)));
        }

        $('#@nameof(Model.AttributeIDArray)').val(finalAttributeList);

        let transactionCustomFieldList = [];
        transactionCustomFieldList = await getTransactionCustomFieldCatalog();
        $('#@nameof(Model.TransactionCustomFieldCatalog)').val(JSON.stringify(transactionCustomFieldList));
    });

    function getTransactionCustomFieldCatalog() {
        let transactionCustomFieldList = [];

        $('.custom-control-field').each((index, e) => {
            let currentRow = e;
            let valueContainer = $(currentRow).find('.value-container');
            let valueID = null;
            let valueIDArray = [];
            let comment = '';

            @*if ($(valueContainer).find('input[type="text"], input[type="date"], input[type="time"], textarea').length > 0) {
                comment = $(valueContainer).find('input[type="text"], input[type="date"], input[type="time"], textarea').val();
            }
            else
                if ($(valueContainer).find('input[type="radio"]:checked').length > 0) {
                    valueID = $(valueContainer).find('input[type="radio"]:checked').val();
                }
                else
                    if ($(valueContainer).find('input[type="checkbox"]:checked').length > 0) {
                        let elementList = $(valueContainer).find('input[type="checkbox"]:checked');
                        if (elementList.length > 0) {
                            for (let index = 0; index < elementList.length; index++) {
                                valueIDArray.push(parseInt($(elementList[index]).val()));
                                /*valueID =
                                    valueID != null && valueID != ''
                                        ? (valueID + ',' + $(elementList[index]).val())
                                        : $(elementList[index]).val();*/
                            }
                        }
                    }
                    else
                        if ($(valueContainer).find('select option:selected').length > 0) {
                            valueID = $(valueContainer).find('select option:selected').val();
                        }*@

            if ($(valueContainer).find('.custom-control-value-text').length > 0) {
                comment = $(valueContainer).find('input[type="text"], input[type="date"], input[type="time"], textarea').val();
            }
            else
            if ($(valueContainer).find('.custom-control-value-radio').length > 0) {
                valueID = $(valueContainer).find('input[type="radio"]:checked').val();
            }
            else
            if ($(valueContainer).find('.custom-control-value-checkbox').length > 0) {
                let elementList = $(valueContainer).find('input[type="checkbox"]:checked');
                if (elementList.length > 0) {
                    for (let index = 0; index < elementList.length; index++) {
                        valueIDArray.push(parseInt($(elementList[index]).val()));
                        /*valueID =
                            valueID != null && valueID != ''
                                ? (valueID + ',' + $(elementList[index]).val())
                                : $(elementList[index]).val();*/
                    }
                }
            }
            else
            if ($(valueContainer).find('.custom-control-value-select').length > 0) {
                if ($(valueContainer).find('select option:selected').length > 0) {
                    valueID = $(valueContainer).find('select option:selected').val();
                } else {
                    valueID = null;
                }
            }

            let transactionCustomFieldID = 0;
            let customFieldID = $(e).data('customfieldid');

            let transactionCustomField = {};

            if (valueIDArray.length > 0) {
                for (var i = 0; i < valueIDArray.length; i++) {
                    transactionCustomField =
                    {
                        "ID": transactionCustomFieldID ?? 0,
                        "TransactionID": 0,
                        "CustomFieldID": customFieldID,
                        "Comment": valueIDArray[i] == null || valueIDArray[i] == 0 ? comment : null,
                        "ValueID": valueIDArray[i],
                        "BasicInfoID": 0
                    };

                    transactionCustomFieldList.push(transactionCustomField);
                }
            }
            else {
                transactionCustomField =
                {
                    "ID": transactionCustomFieldID ?? 0,
                    "TransactionID": 0,
                    "CustomFieldID": customFieldID,
                    "Comment": valueID == null || valueID == 0 ? comment : null,
                    "ValueID": valueID,
                    "BasicInfoID": 0
                };

                if ((transactionCustomField.ValueID > 0) || (transactionCustomField.Comment != '')) {
                    transactionCustomFieldList.push(transactionCustomField);
                }
            }
        });

        return transactionCustomFieldList;
    }
</script>