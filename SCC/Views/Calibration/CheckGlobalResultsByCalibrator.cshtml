@using SCC.ViewModels;
@using SCC_BL;
@using System.Globalization;

@model CalibrationResultsByCalibratorViewModel

@{
    Layout = null;
    ViewBag.Title = "Reporte de sesión de precisión general por calibrador";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>

    @Styles.Render("~/Content/css")
    @Styles.Render("~/Content/navbar")
    @Scripts.Render("~/bundles/jquery")
    @Styles.Render("~/Content/bootstrap.css")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/modernizr")
    <link href="~/Content/boxicons.min.css" rel='stylesheet'>

    <script src="~/Scripts/Custom/custom-library-functions.js"></script>

    @Styles.Render("~/Content/panel")
    @Styles.Render("~/Content/radio")

    @*@Styles.Render("~/Content/datatables")
        @Scripts.Render("~/bundles/datatables")*@

    <link href="~/Content/DataTables/datatables.min.css" rel="stylesheet" />
    <script src="~/Content/DataTables/datatables.min.js"></script>

    <link href="~/Content/Custom/Chosen/chosen.min.css" rel="stylesheet" />
    <script src="~/Content/Custom/Chosen/chosen.jquery.min.js"></script>

    <link href="~/Content/Custom/Datatables/custom-datatables.css" rel="stylesheet" />

    <style>
        .report-title {
            color: #7DA3BE;
            margin: 25px;
        }

        #tbInfo thead {
            color: #6379B4;
        }

            #tbInfo thead th {
                border-bottom-width: 2px;
                border-bottom-style: solid;
                border-bottom-color: #6379B4;
            }

        #tbInfo tbody tr td {
            border-bottom-width: 1px;
            border-bottom-style: solid;
            border-bottom-color: #6379B4;
        }

        #tbInfoAttributes tbody tr td {
            border-width: 1px;
            border-style: solid;
            border-color: #d5d5d5;
        }

        #tbInfoAttributes tbody tr td .table-head {
            border-width: 0px;
        }

        #tbInfoAttributes tbody tr:hover {
            background-color: #d5d5d5;
        }

        #tbInfo tbody tr:hover {
            background-color: #d5d5d5;
        }

        .darker-background {
            background-color: #d5d5d5;
        }

        #tbInfo {
            margin: 10px;
        }

        .bg-custom-error-title {
            background-color: #6379B4;
        }

        .bg-custom-bi-title {
            background-color: #D5674E;
        }

        .bg-custom-attribute-value-catalog {
            background-color: #F0866C;
            color: #ffffff;
            font-weight: bold;
            border: 1px solid #c6c6c6;
        }
    </style>
</head>
<body>
    <div class="text-center">
        <h3 class="report-title">
            @ViewBag.Title
        </h3>
    </div>
    <table id="tbInfo">
        <thead>
            <tr>
                <th class="text-start">
                    Mostrar / Ocultar
                </th>
                <th class="text-center">
                    Precisión de la sesión
                </th>
                @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                {
                    <th class="darker-background text-center">
                        @calibratorUser.Person.SurName, @calibratorUser.Person.FirstName
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="text-end">
                    Error Crítico de Usuario Final
                </td>
                <td class="text-center">
                    @if (Model.FUCE != null)
                    {
                        string percentageValue =
                            String.Format(
                                CultureInfo.InvariantCulture,
                                "{0:0.##}",
                                Model.FUCE.PercentageScore);

                        string toShow = $"{percentageValue}%";

                        @toShow
                    }
                </td>
                @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                {
                    <td class="text-center">
                        @if (Model.ResultsByCalibratorList.Select(e => e.CalibratorUser.ID).Contains(calibratorUser.ID))
                        {
                            CalibrationResultsByCalibratorViewModel.ResultsByCalibrator currentResultsByCalibrator =
                                Model.ResultsByCalibratorList
                                    .Where(e =>
                                        e.CalibratorUser.ID == calibratorUser.ID)
                                    .FirstOrDefault();

                            if (currentResultsByCalibrator.FUCE != null)
                            {
                                string percentageValue =
                                    String.Format(
                                        CultureInfo.InvariantCulture,
                                        "{0:0.##}",
                                        currentResultsByCalibrator.FUCE.PercentageScore);

                                string toShow = $"{percentageValue}% ({@currentResultsByCalibrator.FUCE.Success}/{@currentResultsByCalibrator.FUCE.Total})";

                                @toShow
                            }
                        }
                        else
                        {

                        }
                    </td>
                }
            </tr>
            <tr>
                <td class="text-end">
                    Error Crítico de Negocio
                </td>
                <td class="text-center">
                    @if (Model.BCE != null)
                    {
                        string percentageValue =
                            String.Format(
                                CultureInfo.InvariantCulture,
                                "{0:0.##}",
                                Model.BCE.PercentageScore);

                        string toShow = $"{percentageValue}%";

                        @toShow
                    }
                </td>
                @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                {
                    <td class="text-center">
                        @if (Model.ResultsByCalibratorList.Select(e => e.CalibratorUser.ID).Contains(calibratorUser.ID))
                        {
                            CalibrationResultsByCalibratorViewModel.ResultsByCalibrator currentResultsByCalibrator =
                                Model.ResultsByCalibratorList
                                    .Where(e =>
                                        e.CalibratorUser.ID == calibratorUser.ID)
                                    .FirstOrDefault();

                            if (currentResultsByCalibrator.BCE != null)
                            {
                                string percentageValue =
                                    String.Format(
                                        CultureInfo.InvariantCulture,
                                        "{0:0.##}",
                                        currentResultsByCalibrator.BCE.PercentageScore);

                                string toShow = $"{percentageValue}% ({@currentResultsByCalibrator.BCE.Success}/{@currentResultsByCalibrator.BCE.Total})";

                                @toShow
                            }
                        }
                        else
                        {

                        }
                    </td>
                }
            </tr>
            <tr>
                <td class="text-end">
                    Error Crítico de Cumplimiento
                </td>
                <td class="text-center">
                    @if (Model.FCE != null)
                    {
                        string percentageValue =
                            String.Format(
                                CultureInfo.InvariantCulture,
                                "{0:0.##}",
                                Model.FCE.PercentageScore);

                        string toShow = $"{percentageValue}%";

                        @toShow
                    }
                </td>
                @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                {
                    <td class="text-center">
                        @if (Model.ResultsByCalibratorList.Select(e => e.CalibratorUser.ID).Contains(calibratorUser.ID))
                        {
                            CalibrationResultsByCalibratorViewModel.ResultsByCalibrator currentResultsByCalibrator =
                                Model.ResultsByCalibratorList
                                    .Where(e =>
                                        e.CalibratorUser.ID == calibratorUser.ID)
                                    .FirstOrDefault();

                            if (currentResultsByCalibrator.FCE != null)
                            {
                                string percentageValue =
                                    String.Format(
                                        CultureInfo.InvariantCulture,
                                        "{0:0.##}",
                                        currentResultsByCalibrator.FCE.PercentageScore);

                                string toShow = $"{percentageValue}% ({@currentResultsByCalibrator.FCE.Success}/{@currentResultsByCalibrator.FCE.Total})";

                                @toShow
                            }
                        }
                        else
                        {

                        }
                    </td>
                }
            </tr>
            <tr>
                <td class="text-end">
                    Error No Crítico
                </td>
                <td class="text-center">
                    @if (Model.NCE != null)
                    {
                        string percentageValue =
                            String.Format(
                                CultureInfo.InvariantCulture,
                                "{0:0.##}",
                                Model.NCE.PercentageScore);

                        string toShow = $"{percentageValue}%";

                        @toShow
                    }
                </td>
                @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                {
                    <td class="text-center">
                        @if (Model.ResultsByCalibratorList.Select(e => e.CalibratorUser.ID).Contains(calibratorUser.ID))
                        {
                            CalibrationResultsByCalibratorViewModel.ResultsByCalibrator currentResultsByCalibrator =
                                Model.ResultsByCalibratorList
                                    .Where(e =>
                                        e.CalibratorUser.ID == calibratorUser.ID)
                                    .FirstOrDefault();

                            if (currentResultsByCalibrator.NCE != null)
                            {
                                string percentageValue =
                                    String.Format(
                                        CultureInfo.InvariantCulture,
                                        "{0:0.##}",
                                        currentResultsByCalibrator.NCE.PercentageScore);

                                string toShow = $"{percentageValue}% ({@currentResultsByCalibrator.NCE.Success}/{@currentResultsByCalibrator.NCE.Total})";

                                @toShow
                            }
                        }
                        else
                        {

                        }
                    </td>
                }
            </tr>
            <tr>
                <td class="text-end">
                    Precisión general del calibrador
                </td>
                <td class="text-center">
                    @if (Model.OverallAccuracy != null)
                    {
                        string percentageValue =
                            String.Format(
                                CultureInfo.InvariantCulture,
                                "{0:0.##}",
                                Model.OverallAccuracy);

                        string toShow = $"{percentageValue}%";

                        @toShow
                    }
                </td>
                @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                {
                    <td class="text-center">
                        @if (Model.ResultsByCalibratorList.Select(e => e.CalibratorUser.ID).Contains(calibratorUser.ID))
                        {
                            CalibrationResultsByCalibratorViewModel.ResultsByCalibrator currentResultsByCalibrator =
                                Model.ResultsByCalibratorList
                                    .Where(e =>
                                        e.CalibratorUser.ID == calibratorUser.ID)
                                    .FirstOrDefault();

                            string percentageValue =
                                currentResultsByCalibrator.OverallAccuracy != null
                                    ? String.Format(
                                        CultureInfo.InvariantCulture,
                                        "{0:0.##}",
                                        currentResultsByCalibrator.OverallAccuracy)
                                    : string.Empty;

                            string toShow =
                                !string.IsNullOrEmpty(percentageValue)
                                    ? $"{percentageValue}%"
                                    : string.Empty;

                            @toShow
                        }
                        else
                        {

                        }
                    </td>
                }
            </tr>
            <tr>
                <td class="text-end">
                    Precisión por subatributo
                </td>
                <td class="text-center">
                    N/A
                </td>
                @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                {
                    <td class="text-center">
                        N/A
                    </td>
                }
            </tr>
            <tr>
                <td class="text-end">
                    Precisión de inteligencia de negocios
                </td>
                <td class="text-center">
                    N/A
                </td>
                @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                {
                    <td class="text-center">
                        N/A
                    </td>
                }
            </tr>
        </tbody>
    </table>
    <table class="mt-3" id="tbInfoAttributes">
        <thead>
            <tr>
                <th class="text-start">
                    Atributos
                </th>
                <th class="text-center">
                    Precisión de la sesión
                </th>
                @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                {
                    <th class="darker-background text-center">
                        @calibratorUser.Person.SurName, @calibratorUser.Person.FirstName
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @if (Model.Form.AttributeList.Where(e => e.ErrorTypeID == (int)SCC_BL.DBValues.Catalog.ATTRIBUTE_ERROR_TYPE.FUCE).Count() > 0)
            {
                <tr>
                    <td class="text-start bg-custom-error-title text-light my-2 p-3 table-head" width="50%">
                        <p class="ml-5">Error Crítico de Usuario Final</p>
                    </td>
                    <td class="bg-custom-error-title text-light my-2 p-3 table-head">
                    </td>
                    @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                    {
                        <td class="bg-custom-error-title text-light my-2 p-3 table-head">
                        </td>
                    }
                </tr>
                foreach (SCC_BL.Attribute attribute in Model.Form.AttributeList.Where(e => e.ErrorTypeID == (int)SCC_BL.DBValues.Catalog.ATTRIBUTE_ERROR_TYPE.FUCE))
                {
                    int spaceCounter = 0;

                    SCC_BL.Attribute auxAttribute = attribute;

                    while (auxAttribute.ParentAttributeID != null && auxAttribute.ParentAttributeID > 0)
                    {
                        auxAttribute = Model.Form.AttributeList.Where(e => e.ID == auxAttribute.ParentAttributeID.Value).FirstOrDefault();

                        spaceCounter++;
                    }

                    <tr class="text-dark border border-secondary mt-1 attribute-row @(attribute.ParentAttributeID != null && attribute.ParentAttributeID > 0 ? "d-none" : string.Empty)" data-attributeid="@attribute.ID" data-parentattributeid="@attribute.ParentAttributeID">
                        <td class="text-start" title="@(!string.IsNullOrEmpty(attribute.Description) ? attribute.Description : attribute.Name)" width="50%">
                            @for (int i = 0; i < spaceCounter; i++)
                            {
                                <div class="attribute-marginator px-4 d-inline-block"></div>
                            }
                            @if (Model.Form.AttributeList
                                    .Where(e =>
                                        e.ParentAttributeID == attribute.ID)
                                    .Count() > 0)
                            {
                                <i class='bx bxs-plus-square btn-attribute-show m-1 display-6'></i>
                                <i class='bx bxs-minus-square btn-attribute-hide m-1 display-6 text-danger d-none'></i>
                                @*<i class="bx bxs-check-square text-success" title="Todo correcto"></i>*@
                            }
                            <span>@attribute.Name</span>
                        </td>
                        <td class="text-center">
                            @{
                                decimal overallAccuracy =
                                    Model.ResultByAttributeList
                                        .Where(e =>
                                            e.AttributeID == attribute.ID)
                                        .FirstOrDefault()
                                        .PercentageScore;

                                string overallAccuracyValue =
                                    overallAccuracy != null
                                        ? String.Format(
                                            CultureInfo.InvariantCulture,
                                            "{0:0.##}",
                                            overallAccuracy) + "%"
                                        : string.Empty;
                            }

                            @overallAccuracyValue
                        </td>
                        @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                        {
                            <td class="text-center">
                                @{
                                    CalibrationResultsByCalibratorViewModel.ResultsByCalibrator resultsByCalibrator =
                                        Model.ResultsByCalibratorList
                                        .Where(e =>
                                            e.CalibratorUser.ID == calibratorUser.ID)
                                        .FirstOrDefault();

                                    CalibrationResultsByCalibratorViewModel.ResultsByCalibrator.ResultByAttribute resultByAttribute =
                                        resultsByCalibrator.ResultByAttributeList
                                        .Where(e =>
                                            e.AttributeID == attribute.ID)
                                        .FirstOrDefault();

                                    string percentageValue =
                                        resultByAttribute != null
                                            ? String.Format(
                                                CultureInfo.InvariantCulture,
                                                "{0:0.##}",
                                                resultByAttribute.PercentageScore) + "%"
                                            : string.Empty;
                                }

                                @percentageValue
                            </td>
                        }
                    </tr>
                }
            }

            @if (Model.Form.AttributeList.Where(e => e.ErrorTypeID == (int)SCC_BL.DBValues.Catalog.ATTRIBUTE_ERROR_TYPE.BCE).Count() > 0)
            {
                <tr>
                    <td class="text-start bg-custom-error-title text-light my-2 p-3 table-head" width="50%">
                        <p class="ml-5">Error Crítico de Negocio</p>
                    </td>
                    <td class="bg-custom-error-title text-light my-2 p-3 table-head">
                    </td>
                    @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                    {
                        <td class="bg-custom-error-title text-light my-2 p-3 table-head">
                        </td>
                    }
                </tr>
                foreach (SCC_BL.Attribute attribute in Model.Form.AttributeList.Where(e => e.ErrorTypeID == (int)SCC_BL.DBValues.Catalog.ATTRIBUTE_ERROR_TYPE.BCE))
                {
                    int spaceCounter = 0;

                    SCC_BL.Attribute auxAttribute = attribute;

                    while (auxAttribute.ParentAttributeID != null && auxAttribute.ParentAttributeID > 0)
                    {
                        auxAttribute = Model.Form.AttributeList.Where(e => e.ID == auxAttribute.ParentAttributeID.Value).FirstOrDefault();

                        spaceCounter++;
                    }

                    <tr class="text-dark border border-secondary mt-1 attribute-row @(attribute.ParentAttributeID != null && attribute.ParentAttributeID > 0 ? "d-none" : string.Empty)" data-attributeid="@attribute.ID" data-parentattributeid="@attribute.ParentAttributeID">
                        <td class="text-start" title="@(!string.IsNullOrEmpty(attribute.Description) ? attribute.Description : attribute.Name)" width="50%">
                            @for (int i = 0; i < spaceCounter; i++)
                            {
                                <div class="attribute-marginator px-4 d-inline-block"></div>
                            }
                            @if (Model.Form.AttributeList
                                    .Where(e =>
                                        e.ParentAttributeID == attribute.ID)
                                    .Count() > 0)
                            {
                                <i class='bx bxs-plus-square btn-attribute-show m-1 display-6'></i>
                                <i class='bx bxs-minus-square btn-attribute-hide m-1 display-6 text-danger d-none'></i>
                                @*<i class="bx bxs-check-square text-success" title="Todo correcto"></i>*@
                            }
                            <span>@attribute.Name</span>
                        </td>
                        <td class="text-center">
                            @{
                                decimal overallAccuracy =
                                    Model.ResultByAttributeList
                                        .Where(e =>
                                            e.AttributeID == attribute.ID)
                                        .FirstOrDefault()
                                        .PercentageScore;

                                string overallAccuracyValue =
                                    overallAccuracy != null
                                        ? String.Format(
                                            CultureInfo.InvariantCulture,
                                            "{0:0.##}",
                                            overallAccuracy) + "%"
                                        : string.Empty;
                            }

                            @overallAccuracyValue
                        </td>
                        @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                        {
                            <td class="text-center">
                                @{
                                    CalibrationResultsByCalibratorViewModel.ResultsByCalibrator resultsByCalibrator =
                                        Model.ResultsByCalibratorList
                                        .Where(e =>
                                            e.CalibratorUser.ID == calibratorUser.ID)
                                        .FirstOrDefault();

                                    CalibrationResultsByCalibratorViewModel.ResultsByCalibrator.ResultByAttribute resultByAttribute =
                                        resultsByCalibrator.ResultByAttributeList
                                        .Where(e =>
                                            e.AttributeID == attribute.ID)
                                        .FirstOrDefault();

                                    string percentageValue =
                                        resultByAttribute != null
                                            ? String.Format(
                                                CultureInfo.InvariantCulture,
                                                "{0:0.##}",
                                                resultByAttribute.PercentageScore) + "%"
                                            : string.Empty;
                                }

                                @percentageValue
                            </td>
                        }
                    </tr>
                }
            }

            @if (Model.Form.AttributeList.Where(e => e.ErrorTypeID == (int)SCC_BL.DBValues.Catalog.ATTRIBUTE_ERROR_TYPE.FCE).Count() > 0)
            {
                <tr>
                    <td class="text-start bg-custom-error-title text-light my-2 p-3 table-head" width="50%">
                        <p class="ml-5">Error Crítico de Cumplimiento</p>
                    </td>
                    <td class="bg-custom-error-title text-light my-2 p-3 table-head">
                    </td>
                    @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                    {
                        <td class="bg-custom-error-title text-light my-2 p-3 table-head">
                        </td>
                    }
                </tr>
                foreach (SCC_BL.Attribute attribute in Model.Form.AttributeList.Where(e => e.ErrorTypeID == (int)SCC_BL.DBValues.Catalog.ATTRIBUTE_ERROR_TYPE.FCE))
                {
                    int spaceCounter = 0;

                    SCC_BL.Attribute auxAttribute = attribute;

                    while (auxAttribute.ParentAttributeID != null && auxAttribute.ParentAttributeID > 0)
                    {
                        auxAttribute = Model.Form.AttributeList.Where(e => e.ID == auxAttribute.ParentAttributeID.Value).FirstOrDefault();

                        spaceCounter++;
                    }

                    <tr class="text-dark border border-secondary mt-1 attribute-row @(attribute.ParentAttributeID != null && attribute.ParentAttributeID > 0 ? "d-none" : string.Empty)" data-attributeid="@attribute.ID" data-parentattributeid="@attribute.ParentAttributeID">
                        <td class="text-start" title="@(!string.IsNullOrEmpty(attribute.Description) ? attribute.Description : attribute.Name)" width="50%">
                            @for (int i = 0; i < spaceCounter; i++)
                            {
                                <div class="attribute-marginator px-4 d-inline-block"></div>
                            }
                            @if (Model.Form.AttributeList
                                    .Where(e =>
                                        e.ParentAttributeID == attribute.ID)
                                    .Count() > 0)
                            {
                                <i class='bx bxs-plus-square btn-attribute-show m-1 display-6'></i>
                                <i class='bx bxs-minus-square btn-attribute-hide m-1 display-6 text-danger d-none'></i>
                                @*<i class="bx bxs-check-square text-success" title="Todo correcto"></i>*@
                            }
                            <span>@attribute.Name</span>
                        </td>
                        <td class="text-center">
                            @{
                                decimal overallAccuracy =
                                    Model.ResultByAttributeList
                                        .Where(e =>
                                            e.AttributeID == attribute.ID)
                                        .FirstOrDefault()
                                        .PercentageScore;

                                string overallAccuracyValue =
                                    overallAccuracy != null
                                        ? String.Format(
                                            CultureInfo.InvariantCulture,
                                            "{0:0.##}",
                                            overallAccuracy) + "%"
                                        : string.Empty;
                            }

                            @overallAccuracyValue
                        </td>
                        @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                        {
                            <td class="text-center">
                                @{
                                    CalibrationResultsByCalibratorViewModel.ResultsByCalibrator resultsByCalibrator =
                                        Model.ResultsByCalibratorList
                                        .Where(e =>
                                            e.CalibratorUser.ID == calibratorUser.ID)
                                        .FirstOrDefault();

                                    CalibrationResultsByCalibratorViewModel.ResultsByCalibrator.ResultByAttribute resultByAttribute =
                                        resultsByCalibrator.ResultByAttributeList
                                        .Where(e =>
                                            e.AttributeID == attribute.ID)
                                        .FirstOrDefault();

                                    string percentageValue =
                                        resultByAttribute != null
                                            ? String.Format(
                                                CultureInfo.InvariantCulture,
                                                "{0:0.##}",
                                                resultByAttribute.PercentageScore) + "%"
                                            : string.Empty;
                                }

                                @percentageValue
                            </td>
                        }
                    </tr>
                }
            }

            @if (Model.Form.AttributeList.Where(e => e.ErrorTypeID == (int)SCC_BL.DBValues.Catalog.ATTRIBUTE_ERROR_TYPE.NCE).Count() > 0)
            {
                <tr>
                    <td class="text-start bg-custom-error-title text-light my-2 p-3 table-head" width="50%">
                        <p class="ml-5">Error No Crítico</p>
                    </td>
                    <td class="bg-custom-error-title text-light my-2 p-3 table-head">
                    </td>
                    @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                    {
                        <td class="bg-custom-error-title text-light my-2 p-3 table-head">
                        </td>
                    }
                </tr>
                foreach (SCC_BL.Attribute attribute in Model.Form.AttributeList.Where(e => e.ErrorTypeID == (int)SCC_BL.DBValues.Catalog.ATTRIBUTE_ERROR_TYPE.NCE))
                {
                    int spaceCounter = 0;

                    SCC_BL.Attribute auxAttribute = attribute;

                    while (auxAttribute.ParentAttributeID != null && auxAttribute.ParentAttributeID > 0)
                    {
                        auxAttribute = Model.Form.AttributeList.Where(e => e.ID == auxAttribute.ParentAttributeID.Value).FirstOrDefault();

                        spaceCounter++;
                    }

                    <tr class="text-dark border border-secondary mt-1 attribute-row @(attribute.ParentAttributeID != null && attribute.ParentAttributeID > 0 ? "d-none" : string.Empty)" data-attributeid="@attribute.ID" data-parentattributeid="@attribute.ParentAttributeID">
                        <td class="text-start" title="@(!string.IsNullOrEmpty(attribute.Description) ? attribute.Description : attribute.Name)" width="50%">
                            @for (int i = 0; i < spaceCounter; i++)
                            {
                                <div class="attribute-marginator px-4 d-inline-block"></div>
                            }
                            @if (Model.Form.AttributeList
                                    .Where(e =>
                                        e.ParentAttributeID == attribute.ID)
                                    .Count() > 0)
                            {
                                <i class='bx bxs-plus-square btn-attribute-show m-1 display-6'></i>
                                <i class='bx bxs-minus-square btn-attribute-hide m-1 display-6 text-danger d-none'></i>
                                @*<i class="bx bxs-check-square text-success" title="Todo correcto"></i>*@
                            }
                            <span>@attribute.Name</span>
                        </td>
                        <td class="text-center">
                            @{
                                decimal overallAccuracy =
                                    Model.ResultByAttributeList
                                        .Where(e =>
                                            e.AttributeID == attribute.ID)
                                        .FirstOrDefault()
                                        .PercentageScore;

                                string overallAccuracyValue =
                                    overallAccuracy != null
                                        ? String.Format(
                                            CultureInfo.InvariantCulture,
                                            "{0:0.##}",
                                            overallAccuracy) + "%"
                                        : string.Empty;
                            }

                            @overallAccuracyValue
                        </td>
                        @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                        {
                            <td class="text-center">
                                @{
                                    CalibrationResultsByCalibratorViewModel.ResultsByCalibrator resultsByCalibrator =
                                        Model.ResultsByCalibratorList
                                        .Where(e =>
                                            e.CalibratorUser.ID == calibratorUser.ID)
                                        .FirstOrDefault();

                                    CalibrationResultsByCalibratorViewModel.ResultsByCalibrator.ResultByAttribute resultByAttribute =
                                        resultsByCalibrator.ResultByAttributeList
                                        .Where(e =>
                                            e.AttributeID == attribute.ID)
                                        .FirstOrDefault();

                                    string percentageValue =
                                        resultByAttribute != null
                                            ? String.Format(
                                                CultureInfo.InvariantCulture,
                                                "{0:0.##}",
                                                resultByAttribute.PercentageScore) + "%"
                                            : string.Empty;
                                }

                                @percentageValue
                            </td>
                        }
                    </tr>
                }
            }
            @if (Model.Form.BusinessIntelligenceFieldList.Count() > 0)
            {
                <tr>
                    <td class="text-start bg-custom-error-title text-light my-2 p-3 table-head" width="50%">
                        <p class="ml-5">Inteligencia de negocios</p>
                    </td>
                    <td class="bg-custom-error-title text-light my-2 p-3 table-head">
                    </td>
                    @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                    {
                        <td class="bg-custom-error-title text-light my-2 p-3 table-head">
                        </td>
                    }
                </tr>
                foreach (SCC_BL.BusinessIntelligenceField businessIntelligenceField in Model.Form.BusinessIntelligenceFieldList)
                {
                    int spaceCounter = 0;

                    SCC_BL.BusinessIntelligenceField auxBusinessIntelligenceField = businessIntelligenceField;

                    while (auxBusinessIntelligenceField.ParentBIFieldID != null && auxBusinessIntelligenceField.ParentBIFieldID > 0)
                    {
                        auxBusinessIntelligenceField = Model.Form.BusinessIntelligenceFieldList.Where(e => e.ID == auxBusinessIntelligenceField.ParentBIFieldID.Value).FirstOrDefault();

                        spaceCounter++;
                    }

                    <tr class="text-dark border border-secondary mt-1 bifield-row @(businessIntelligenceField.ParentBIFieldID != null && businessIntelligenceField.ParentBIFieldID > 0 ? "d-none" : string.Empty)" data-bifieldid="@businessIntelligenceField.ID" data-parentbifieldid="@businessIntelligenceField.ParentBIFieldID">
                        <td class="text-start" title="@(!string.IsNullOrEmpty(businessIntelligenceField.Description) ? businessIntelligenceField.Description : businessIntelligenceField.Name)" width="50%">
                            @for (int i = 0; i < spaceCounter; i++)
                            {
                                <div class="bifield-marginator px-4 d-inline-block"></div>
                            }
                            @if (Model.Form.BusinessIntelligenceFieldList
                                    .Where(e =>
                                        e.ParentBIFieldID == businessIntelligenceField.ID)
                                    .Count() > 0)
                            {
                                <i class='bx bxs-plus-square btn-bifield-show m-1 display-6'></i>
                                <i class='bx bxs-minus-square btn-bifield-hide m-1 display-6 text-danger d-none'></i>
                                @*<i class="bx bxs-check-square text-success" title="Todo correcto"></i>*@
                            }
                            <span>@businessIntelligenceField.Name</span>
                        </td>
                        <td class="text-center">
                        </td>
                        @foreach (User calibratorUser in Model.ResultsByCalibratorList.Select(e => e.CalibratorUser).ToList())
                        {
                            <td class="text-center">
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
    <script>
        $(document).ready(function () {
            $('#tbInfo').DataTable({
                paging: false,
                ordering: false,
                info: false,
                searching: false,
            });

            $('#tbInfoAttributes').DataTable({
                paging: false,
                ordering: false,
                info: false,
                searching: false,
            });
        });

        $('.btn-attribute-show').on('click', e => {
            let currentControl = e.currentTarget;

            let attributeContainer = $(currentControl).parent().parent();
            let attributeID = $(attributeContainer).data('attributeid');

            let buttonHide = $(attributeContainer).find('.btn-attribute-hide');

            $(buttonHide).removeClass('d-none');
            $(currentControl).addClass('d-none');

            $('[data-parentattributeid=' + attributeID + ']').removeClass('d-none');
        });

        $('.btn-attribute-hide').on('click', e => {
            let currentControl = e.currentTarget;

            let attributeContainer = $(currentControl).parent().parent();
            let attributeID = $(attributeContainer).data('attributeid');

            let buttonShow = $(attributeContainer).find('.btn-attribute-show');

            $(buttonShow).removeClass('d-none');
            $(currentControl).addClass('d-none');

            $('[data-parentattributeid=' + attributeID + ']').addClass('d-none');
        });

        $('.btn-bifield-show').on('click', e => {
            let currentControl = e.currentTarget;

            let biFieldContainer = $(currentControl).parent().parent();
            let biFieldID = $(biFieldContainer).data('bifieldid');

            let buttonHide = $(biFieldContainer).find('.btn-bifield-hide');

            $(buttonHide).removeClass('d-none');
            $(currentControl).addClass('d-none');

            $('[data-parentbifieldid=' + biFieldID + ']').removeClass('d-none');
        });

        $('.btn-bifield-hide').on('click', e => {
            let currentControl = e.currentTarget;

            let biFieldContainer = $(currentControl).parent().parent();
            let biFieldID = $(biFieldContainer).data('bifieldid');

            let buttonShow = $(biFieldContainer).find('.btn-bifield-show');

            $(buttonShow).removeClass('d-none');
            $(currentControl).addClass('d-none');

            $('[data-parentbifieldid=' + biFieldID + ']').addClass('d-none');
        });
    </script>
</body>
</html>
